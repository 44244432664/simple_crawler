import os
import json
from ebooklib import epub

import tqdm

from epub_style import epub_style_css, epub_cover_xhtml, epub_chapter_xhtml


def create_epub(json_file, output_path=None, chapter_num=None):
    """
    Create an EPUB file from a JSON file.

    :param json_file: Path to the input JSON file.
    :param output_path: Path where the output EPUB will be saved.
    :param chapter_num: Optional chapter number to include in the EPUB.
    defaults is None, which means all chapters will be included.
    or list of chapters to include. Example: [1, 2, 3] or [1]
    or tuple of 2 numbers to include a range of chapters.
    Example: (1, 5) will include chapters from 1 to 5.
    """
    # Ensure the input file exists

    if not os.path.isfile(json_file):
        raise FileNotFoundError(f"JSON file not found: {json_file}")
    
    if output_path is None:
        # Generate output path based on input JSON file name
        output_path = os.path.dirname(json_file)
    
    if not os.path.exists(output_path):
        os.makedirs(output_path)

    with open(json_file, "r", encoding="utf-8") as file:
        novel_info = json.load(file)

    # Create an EPUB book
    book = epub.EpubBook()

    # Set metadata
    book.set_identifier(f"{hash(novel_info['title'])}-{hash(novel_info['author'])}")
    book.set_title(novel_info["title"])
    book.set_language("vi")
    book.add_author(novel_info["author"])
    book.add_metadata("DC", "description", novel_info["description"] if "description" in novel_info else "<p>Không có mô tả</p>")
    for genre in novel_info['genres']:
        book.add_metadata("DC", "subject", genre)

    style = epub.EpubItem(
            file_name="style.css",
            media_type="text/css",
            content=epub_style_css()
        )
    
    book.add_item(style)

    book.set_template("cover", epub_cover_xhtml())
    book.set_template("chapter", epub_chapter_xhtml())

    toc = []
    spine = []

    if novel_info["cover_image"]:
        cover_name = novel_info["cover_image"].split("/")[-1]
        with open(f"{novel_info['cover_image']}", "rb") as cover_file:
            cover_content = cover_file.read()
            book.set_cover(cover_name, cover_content, f"image/{cover_name.split('.')[-1]}")
        
        spine.append("cover")

        cover_item = epub.EpubHtml(
            uid="cover",
            file_name=cover_name,
            media_type=f"image/{cover_name.split('.')[-1]}",
            content=f"""
            <div id="cover">
                <img src="{novel_info['cover_image']}" alt="Cover Image" style="width:100%; height:auto;" />
            </div>
            """
        )

        cover_item.add_link(
            href="style.css",
            rel="stylesheet",
            type="text/css",
            )
        
    book.add_item(cover_item)
    spine.append(cover_item)
    toc.append(epub.Link(cover_name, "Bìa sách", "cover"))
    
    # Add introduction
    intro = epub.EpubHtml(
        title=f"Giới thiệu nội dung",
        file_name="intro.xhtml",
        # lang='vi',
        # <p>Thể loại: {', '.join(self.novel_info['genres']) if self.novel_info['genres'] else 'Khác'}</p>
        content=f"""
        <h1>{novel_info['title']}</h1>
        <p>Tác giả: {novel_info['author']}</p>
        
        <p>Số chương: {novel_info['num_chapters']}</p>
        <p>Mô tả: {novel_info['description'] if 'description' in novel_info else '<p>Không có mô tả</p>'}</p>
        <p>Thể loại: {', '.join(novel_info['genres']) if novel_info['genres'] else 'Khác'}</p>
        <p>Link truyện: <a href="{novel_info['novel_url']}">{novel_info['novel_url']}</a></p>

        <p>This project is inspired and copy style from <b>lncrawler</b> project by <a href="https://github.com/dipu-bd/lightnovel-crawler">dipu-bd/lightnovel-crawler</a>.</p>
        <p>If you like this project, please give some time to visit the original project.</p>
        <p><i>Generated by WikiCrawler of Nguyen Hai Dang</i></p>
        
        """
        # <p>Cover image: <img src="{self.novel_info['cover_image']}" alt="Cover Image" /></p>
    )
    intro.add_link(
    href="style.css",
    rel="stylesheet",
    type="text/css",
    )
    book.add_item(intro)
    toc.append(intro)
    spine.append(intro)

    if novel_info["num_chapters"] <= 100:
        spine.append("nav")

    # Add chapters
    chapters = []
    if chapter_num is None:
        chapters = novel_info["chapters"]
    elif isinstance(chapter_num, list):
        for i in chapter_num:
            if isinstance(i, int) and 0 < i <= novel_info["num_chapters"] and novel_info["chapters"][i - 1]["index"]==i:
                chapters.append(novel_info["chapters"][i - 1])
            elif isinstance(i, str):
                idx = novel_info["chapters"].index(i)+1
                for chapter in novel_info["chapters"]:
                    if chapter["index"] == idx:
                        chapters.append(chapter)
                        break
                else:
                    raise ValueError(f"Chapter '{i}' not found in the novel database.")

    elif isinstance(chapter_num, tuple) and len(chapter_num) == 2:
        start, end = chapter_num
        if 0 < start <= end <= novel_info["num_chapters"]:
            chapters = [novel_info["chapters"][i - 1] for i in range(start, end + 1) if novel_info["chapters"][i - 1]["index"]==i]
    else:
        raise ValueError("Invalid chapter_num format. Must be None, a list of integers, link strings, or a tuple of two integers.")

    for chapter in tqdm.tqdm(chapters, desc="Adding chapters", unit="chapter"):
        c = epub.EpubHtml(
                title=chapter["title"],
                file_name=f"chap_{chapter['index']}.xhtml",
                # lang='vi',
                content=f"""
                <div class="chapter" id="chapter-{chapter['index']}">
                    <h1>{chapter['title'] if 'Chương' in chapter['title'] else 'Chương ' + str(chapter['index']) + ': ' + chapter['title']}</h1>
                </div>
                {chapter['content']}
                """,
            )
        c.add_link(
            href=style.file_name,
            rel="stylesheet",
            type="text/css",
        )
        book.add_item(c)
        toc.append(c)
        spine.append(c)


    # Add navigation
    book.toc = toc
    book.spine = spine
    
    # Add navigation files
    book.add_item(epub.EpubNcx())
    book.add_item(epub.EpubNav())
    
    # Save the epub file
    epub.write_epub(f"{output_path}/{novel_info['title']}.epub", book, {})
    
    print(f"Epub file '{novel_info['title']}.epub' created successfully.")

    return "Epub file created"